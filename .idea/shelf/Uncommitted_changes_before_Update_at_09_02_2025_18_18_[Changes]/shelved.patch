Index: src/ui/HUDRenderer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ui;\r\n\r\nimport main.controller.DrawPriorities;\r\nimport main.controller.Drawable;\r\nimport main.controller.GameState;\r\nimport main.entity.EntityStatistics;\r\nimport main.inventory.Inventory;\r\nimport main.item.Item;\r\nimport utilities.Position;\r\nimport utilities.sprite.Sprite;\r\nimport world.map.tiles.Tile;\r\n\r\nimport java.awt.*;\r\nimport java.util.ArrayList;\r\n\r\npublic class HUDRenderer implements Drawable\r\n{\r\n    HUD hud;\r\n    int renderDebugInfoCounter;\r\n    private String renderTime = \"-\";\r\n    private String updateTime = \"-\";\r\n    private String summaryTime = \"-\";\r\n    private String drawCount = \"-\";\r\n    private final int baseSlotSize = 45;\r\n\r\n    private Font HUDFont;\r\n    private final int baseFontSize = 14;\r\n    private int scaledFontSize;\r\n    private int slotSize;\r\n\r\n    // FRAME POSITIONS //\r\n    Position mainInventoryPosition;\r\n    Position equippedPosition;\r\n    Position barPosition;\r\n    // FRAME POSITIONS //\r\n\r\n    // SLOTS POSITIONS //\r\n    ScreenSlot[][] mainInventorySlots;\r\n    ScreenSlot[] beltSlots;\r\n    ScreenSlot helmetSlot;\r\n    ScreenSlot chestplateSlot;\r\n    ScreenSlot pantsSlot;\r\n    ScreenSlot bootsSlot;\r\n    ScreenSlot shieldSlot;\r\n    ScreenSlot ring1Slot;\r\n    ScreenSlot ring2Slot;\r\n    ScreenSlot amuletSLot;\r\n    // SLOTS POSITIONS //\r\n\r\n    ArrayList<ScreenSlot> screenSlots;\r\n    public ArrayList<ScreenSlot> getScreenSlots() {return screenSlots;}\r\n\r\n    public HUDRenderer(HUD hud)\r\n    {\r\n        this.hud = hud;\r\n        hud.gc.drawables.add(this);\r\n        initScreenSlotsArrayList();\r\n    }\r\n\r\n    private void initScreenSlotsArrayList()\r\n    {\r\n        mainInventorySlots = new ScreenSlot[Inventory.INVENTORY_WIDTH_SLOTS][Inventory.INVENTORY_HEIGHT_SLOTS];\r\n        beltSlots = new ScreenSlot[Inventory.beltWidthSlots];\r\n        screenSlots = new ArrayList<>();\r\n\r\n\r\n        for (int i = 0; i < mainInventorySlots.length; i++) {\r\n            for (int j = 0; j < mainInventorySlots[0].length; j++) {\r\n                mainInventorySlots[i][j] = new ScreenSlot(slotSize, SlotType.mainInvSlot, i, j);\r\n                screenSlots.add(mainInventorySlots[i][j]);\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < beltSlots.length; i++) {\r\n            beltSlots[i] = new ScreenSlot(slotSize, SlotType.beltSlot, i, -1);\r\n            screenSlots.add(beltSlots[i]);\r\n        }\r\n\r\n        helmetSlot = new ScreenSlot(slotSize, SlotType.helmetSlot);\r\n        chestplateSlot = new ScreenSlot(slotSize, SlotType.chestplateSlot);\r\n        pantsSlot = new ScreenSlot(slotSize, SlotType.pantsSlot);\r\n        bootsSlot = new ScreenSlot(slotSize, SlotType.bootsSlot);\r\n        shieldSlot = new ScreenSlot(slotSize, SlotType.shieldSlot);\r\n        ring1Slot = new ScreenSlot(slotSize, SlotType.ring1Slot);\r\n        ring2Slot = new ScreenSlot(slotSize, SlotType.ring2Slot);\r\n        amuletSLot = new ScreenSlot(slotSize, SlotType.amuletSLot);\r\n\r\n        screenSlots.add(helmetSlot);\r\n        screenSlots.add(chestplateSlot);\r\n        screenSlots.add(pantsSlot);\r\n        screenSlots.add(bootsSlot);\r\n        screenSlots.add(shieldSlot);\r\n        screenSlots.add(ring1Slot);\r\n        screenSlots.add(ring2Slot);\r\n        screenSlots.add(amuletSLot);\r\n    }\r\n\r\n    @Override\r\n    public int getDrawPriority()\r\n    {\r\n        return DrawPriorities.HUD.value;\r\n    }\r\n\r\n    @Override\r\n    public void draw(Graphics g2)\r\n    {\r\n        renderHealthBar(g2);\r\n        drawInventoryBar(g2);\r\n        renderFPSTopRight(g2);\r\n        if (hud.gc.gameStateController.getCurrentGameState() == GameState.INVENTORY)\r\n        {\r\n            drawMainInventory(g2);\r\n            drawStatisticsFrame(g2);\r\n            drawEquippedFrame(g2);\r\n            drawDraggingItem(g2);\r\n        }\r\n        if (hud.gc.isDebugMode())\r\n        {\r\n            renderDebugInfoLeft(g2);\r\n            renderDebugInfoLeftTop(g2);\r\n        }\r\n        hud.gc.incrementRenderCount();\r\n    }\r\n\r\n    public void updateSizes()\r\n    {\r\n        scaledFontSize = (int) (baseFontSize * hud.scale / 64);\r\n        HUDFont = new Font(\"Monospaced\", Font.BOLD, scaledFontSize);\r\n\r\n        slotSize = (baseSlotSize * hud.scale) / 64;\r\n    }\r\n\r\n    private void renderHealthBar(Graphics g2)\r\n    {\r\n        Graphics2D g2d = (Graphics2D) g2;\r\n        g2d.setColor(Color.BLACK);\r\n        g2d.setStroke(new BasicStroke(3));\r\n\r\n        if (hud.gc.player.statistics.hitPoints < 0) hud.gc.player.statistics.hitPoints = 0;\r\n        int healthPercent = (int) ((hud.gc.player.statistics.hitPoints / (double) hud.gc.player.getMaxHitPoints()) * 100);\r\n\r\n        int spriteSize = hud.heart.image.getWidth() / Math.max(hud.scale, 1);\r\n        int width = hud.gc.getWidth();\r\n        int height = hud.gc.getHeight();\r\n\r\n        g2d.setColor(Color.DARK_GRAY);\r\n        g2d.fillRect((int)(hud.scale/1.4f), (int)(hud.scale/5f), hud.scale*4, (int)(hud.scale/2.6f));\r\n        g2d.setColor(Color.BLACK);\r\n        g2d.drawRect((int)(hud.scale/1.4f), (int)(hud.scale/5f), hud.scale*4, (int)(hud.scale/2.6f));\r\n        g2d.setColor(Color.RED);\r\n        g2d.fillRect((int)(hud.scale/1.4f)+1, (int)(hud.scale/5f)+1, (healthPercent * hud.scale*4) / 100, (int)(hud.scale/2.6f)-1);\r\n\r\n        g2d.drawImage(hud.heart.image, 0, 0, hud.scale, hud.scale, null);\r\n    }\r\n\r\n    private void renderDebugInfoLeft(Graphics g2)\r\n    {\r\n        renderDebugInfoCounter++;\r\n        if (renderDebugInfoCounter >= 60)\r\n        {\r\n            updateTimers();\r\n            updateDrawCount();\r\n            renderDebugInfoCounter = 0;\r\n        }\r\n\r\n        Graphics2D g2d = (Graphics2D) g2;\r\n        g2d.setColor(Color.WHITE);\r\n        g2d.setFont(HUDFont);\r\n\r\n        int baseX = 10;\r\n        int baseY = (int)(hud.gc.getHeight()/1.8f);\r\n        int scaledX = (int) (baseX * (hud.scale / 64.0));\r\n        int scaledY = baseY;\r\n\r\n        String debugInfo = getTimers() + \"\\n\" + drawCount;\r\n        String[] debugLines = debugInfo.split(\"\\\\n\");\r\n\r\n        for (int i = 0; i < debugLines.length; i++) {\r\n            g2d.drawString(debugLines[i], scaledX, scaledY + i * (scaledFontSize + 5));\r\n        }\r\n    }\r\n\r\n    private void renderFPSTopRight(Graphics g2)\r\n    {\r\n        Graphics2D g2d = (Graphics2D) g2.create(); // Tworzymy nowy kontekst graficzny\r\n\r\n        int x = hud.gc.getWidth() - hud.gc.getWidth() / 11;\r\n        int y = 40;\r\n\r\n\r\n        g2d.setColor(Color.WHITE);\r\n        g2d.setFont(HUDFont);\r\n\r\n        long totalTimePerFrame = hud.gc.getRenderTime() + hud.gc.getUpdateTime();\r\n        int fpsVal = totalTimePerFrame > 0 ? (int) (1_000_000_000L / totalTimePerFrame) : 0;\r\n        fpsVal = Math.min(hud.gc.getTargetDrawFrame(), fpsVal);\r\n\r\n        String fps = String.format(\"FPS: %d\", fpsVal);\r\n        g2d.drawString(fps, x, y);\r\n\r\n    }\r\n\r\n    private void renderDebugInfoLeftTop(Graphics g2)\r\n    {\r\n        Graphics2D g2d = (Graphics2D) g2;\r\n        g2d.setColor(Color.WHITE);\r\n        g2d.setFont(HUDFont);\r\n\r\n        int baseX = 10;\r\n        int baseY = 80;\r\n        int scaledX = (int) (baseX * (hud.scale / 64.0));\r\n        int scaledY = (int) (baseY * (hud.scale / 64.0));\r\n\r\n        int positionX = hud.gc.camera.getCameraPosition().x;\r\n        int positionY = hud.gc.camera.getCameraPosition().y;\r\n\r\n        String cameraPosX = \"X: \" + positionX / Tile.tileSize + \"  \" + positionX;\r\n        String cameraPosY = \"Y: \" + positionY / Tile.tileSize + \"  \" + positionY;\r\n\r\n        g2d.drawString(cameraPosX, scaledX, scaledY);\r\n        g2d.drawString(cameraPosY, scaledX, scaledY + (scaledFontSize + 5));\r\n    }\r\n\r\n    private void updateTimers()\r\n    {\r\n        renderTime = String.format(\"Render time: %.2f ms (%.2f%%)\",\r\n                hud.gc.getRenderTime() / 1_000_000.0f,\r\n                (hud.gc.getRenderTime() / 1_000_000.0f) / (1000.0f / hud.gc.getTargetDrawFrame()) * 100.0f);\r\n\r\n        updateTime = String.format(\"Update time: %.2f ms (%.2f%%)\",\r\n                hud.gc.getUpdateTime() / 1_000_000.0f,\r\n                (hud.gc.getUpdateTime() / 1_000_000.0f) / (1000.0f / hud.gc.getTargetLogicFrame()) * 100.0f);\r\n\r\n        summaryTime = String.format(\"Summary time: %.2f ms (%.2f%%)\",\r\n                (hud.gc.getRenderTime() + hud.gc.getUpdateTime()) / 1_000_000.0f,\r\n                ((hud.gc.getRenderTime() / 1_000_000.0f) / (1000.0f / hud.gc.getTargetDrawFrame()) * 100.0f) +\r\n                        ((hud.gc.getUpdateTime() / 1_000_000.0f) / (1000.0f / hud.gc.getTargetLogicFrame()) * 100.0f));\r\n    }\r\n\r\n    private String getTimers()\r\n    {\r\n        return renderTime + \"\\n\" + updateTime + \"\\n\" + summaryTime;\r\n    }\r\n\r\n    private void updateDrawCount()\r\n    {\r\n        long count = hud.gc.getRenderCount();\r\n        drawCount = \"Draw count: \" + count;\r\n    }\r\n\r\n    public void renderFrame(Graphics g, int x, int y, int width, int height, int innerPadding, int outerWidth, int innerWidth, float opacity)\r\n    {\r\n        Graphics2D g2d = (Graphics2D)g.create();\r\n\r\n        // rounding parameters\r\n        int arcWidth = 10;\r\n        int arcHeight = 10;\r\n\r\n        //int innerOpacity = 2;\r\n        //int outerWidth = 3;\r\n        //int innerWidth = 1;\r\n\r\n\r\n        // inner part of frame\r\n        g2d.setStroke(new BasicStroke());\r\n        g2d.setColor(new Color(0f, 0f, 0f, opacity));\r\n        g2d.fillRoundRect(x, y, width, height, arcWidth, arcHeight);\r\n\r\n        // outer part of frame\r\n        g2d.setColor(Color.DARK_GRAY);\r\n        g2d.setStroke(new BasicStroke(outerWidth));\r\n        g2d.drawRoundRect(x, y, width, height, arcWidth, arcHeight);\r\n\r\n        // middle part of frame\r\n        g2d.setColor(Color.LIGHT_GRAY);\r\n        g2d.setStroke(new BasicStroke(innerWidth));\r\n        g2d.drawRoundRect(x + innerPadding, y + innerPadding, width  - (innerPadding*2), height - (innerPadding*2), arcWidth, arcHeight);\r\n        // g2d.dispose();\r\n\r\n    }\r\n\r\n    public void drawInventoryBar(Graphics g2)\r\n    {\r\n        Graphics2D g2d = (Graphics2D) g2;\r\n        int slotCount = Inventory.beltWidthSlots;\r\n        int totalWidth = slotCount * slotSize;\r\n\r\n\r\n        int marginFromBottom = 10;\r\n        int beltX = (hud.gc.getWidth() - totalWidth) / 2;\r\n        int beltY = hud.gc.getHeight() - slotSize - marginFromBottom;\r\n\r\n        if (barPosition == null) barPosition = new Position(beltX, beltY);\r\n        else\r\n        {\r\n            barPosition.x = beltX;\r\n            barPosition.y = beltY;\r\n        }\r\n\r\n        for (int i = 0; i < slotCount; i++)\r\n        {\r\n            int frameX = beltX + i * slotSize;\r\n            int frameY = beltY;\r\n\r\n\r\n            renderFrame(g2d, frameX, frameY, slotSize, slotSize, 3, 3, 1, 0.5f);\r\n            beltSlots[i].updateSlot(slotSize, frameX, frameY);\r\n        }\r\n\r\n        for (int i = 0; i < hud.gc.player.getInventory().getBeltItemList().size(); i++)\r\n        {\r\n            Item item = hud.gc.player.getInventory().getBeltItemList().get(i);\r\n            if (item != null)\r\n            {\r\n                int x = beltX + i * slotSize;\r\n                drawInventoryItem(g2d, item, x, beltY);\r\n                screenSlots.get(i).setItem(item);\r\n            }\r\n        }\r\n\r\n        //   g2.dispose();\r\n    }\r\n\r\n    public void drawMainInventory(Graphics g2)\r\n    {\r\n        Graphics2D g2d = (Graphics2D) g2.create();\r\n\r\n        //window size\r\n        int width = hud.gc.getWidth();\r\n        int height = hud.gc.getHeight();\r\n\r\n        int widthSlots = Inventory.INVENTORY_WIDTH_SLOTS;\r\n        int heightSlots = Inventory.INVENTORY_HEIGHT_SLOTS;\r\n\r\n        int totalWidth = widthSlots * slotSize;\r\n        int totalHeight = heightSlots * slotSize;\r\n\r\n        int beltSlotCount = Inventory.beltWidthSlots;\r\n        int beltTotalWidth = beltSlotCount * slotSize;\r\n        int beltY = barPosition.y - height/2;\r\n\r\n\r\n        // set main inventory position above inventory bar\r\n        int inventoryFrameX = (width - totalWidth) / 2;\r\n        int inventoryFrameY = beltY - totalHeight;\r\n\r\n        if (mainInventoryPosition == null) mainInventoryPosition = new Position(inventoryFrameX, inventoryFrameY);\r\n        else\r\n        {\r\n            mainInventoryPosition.x = inventoryFrameX;\r\n            mainInventoryPosition.y = inventoryFrameY;\r\n        }\r\n\r\n        // Drawing every inventory slot\r\n        for (int i = 0; i < widthSlots; i++)\r\n        {\r\n            for (int j = 0; j < heightSlots; j++)\r\n            {\r\n                int slotX = inventoryFrameX + i * slotSize;\r\n                int slotY = inventoryFrameY + j * slotSize;\r\n\r\n                renderFrame(g2d, slotX, slotY, slotSize, slotSize, 0, 0, 1, 0.7f);\r\n                mainInventorySlots[i][j].updateSlot(slotSize, slotX, slotY);\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < hud.gc.player.getInventory().getItems().size(); i++)\r\n        {\r\n            Item item = hud.gc.player.getInventory().getItems().get(i);\r\n            if (item != null)\r\n            {\r\n                drawInventoryItem(g2d, item, inventoryFrameX, inventoryFrameY);\r\n                screenSlots.get(i).setItem(item);\r\n            }\r\n        }\r\n        //  g2.dispose();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param g2d           - Graphics2D object\r\n     * @param item          - Item to draw\r\n     * @param inventoryX    - starting X of frame\r\n     * @param inventoryY    - starting Y of frame\r\n     */\r\n    public void drawInventoryItem(Graphics2D g2d, Item item, int inventoryX, int inventoryY)\r\n    {\r\n        Position position = item.getInventoryPosition(); // position of item in inventory\r\n        if (position == null)\r\n        {\r\n            return;\r\n        }\r\n\r\n        int itemSlotWidth = item.getSlotWidth();    // width of item\r\n        int itemSlotHeight = item.getSlotHeight();  // height of item\r\n\r\n        // counting new position and item's sprite size in pixels\r\n        int itemPixelX = inventoryX + position.x * slotSize;\r\n        int itemPixelY = inventoryY + position.y * slotSize;\r\n        int itemPixelWidth = itemSlotWidth * slotSize;\r\n        int itemPixelHeight = itemSlotHeight * slotSize;\r\n\r\n        Sprite sprite = item.getSprite();\r\n\r\n        // scaling and centering\r\n        int spriteWidth = sprite.image.getWidth();\r\n        int spriteHeight = sprite.image.getHeight();\r\n        float scaleX = (float) itemPixelWidth / spriteWidth;\r\n        float scaleY = (float) itemPixelHeight / spriteHeight;\r\n        float scale = Math.min(scaleX, scaleY);\r\n\r\n        int drawWidth = (int) (spriteWidth * scale);\r\n        int drawHeight = (int) (spriteHeight * scale);\r\n\r\n        int drawX = itemPixelX + (itemPixelWidth - drawWidth) / 2; // Centered X\r\n        int drawY = itemPixelY + (itemPixelHeight - drawHeight) / 2; // Centered Y\r\n\r\n        g2d.drawImage(sprite.image, drawX, drawY, drawWidth, drawHeight, null);\r\n    }\r\n\r\n    public void drawItemAtMousePosition(Graphics2D g2d, Item item, int x, int y)\r\n    {\r\n        int itemSlotWidth = item.getSlotWidth();    // width of item\r\n        int itemSlotHeight = item.getSlotHeight();  // height of item\r\n        int itemPixelWidth = itemSlotWidth * slotSize;\r\n        int itemPixelHeight = itemSlotHeight * slotSize;\r\n        Sprite sprite = item.getSprite();\r\n\r\n        // scaling and centering\r\n        int spriteWidth = sprite.image.getWidth();\r\n        int spriteHeight = sprite.image.getHeight();\r\n        float scaleX = (float) itemPixelWidth / spriteWidth;\r\n        float scaleY = (float) itemPixelHeight / spriteHeight;\r\n        float scale = Math.min(scaleX, scaleY);\r\n\r\n        int drawWidth = (int) (spriteWidth * scale);\r\n        int drawHeight = (int) (spriteHeight * scale);\r\n\r\n        int drawX = x + (itemPixelWidth - drawWidth) / 2; // Centered X\r\n        int drawY = y + (itemPixelHeight - drawHeight) / 2; // Centered Y\r\n\r\n        g2d.drawImage(sprite.image, drawX, drawY, drawWidth, drawHeight, null);\r\n    }\r\n\r\n    private void drawDraggingItem(Graphics g2)\r\n    {\r\n        Graphics2D g2d = (Graphics2D) g2.create();\r\n        int mouseX = hud.gc.mouseHandler.getMouseX();\r\n        int mouseY = hud.gc.mouseHandler.getMouseY();\r\n\r\n        if (hud.hudUpdater.isDraggingItem())\r\n        {\r\n            drawItemAtMousePosition(g2d, hud.hudUpdater.getDraggedItem(), mouseX, mouseY);\r\n        }\r\n    }\r\n\r\n    public void drawStatisticsFrame(Graphics g2)\r\n    {\r\n        Graphics2D g2d = (Graphics2D) g2.create();\r\n\r\n        int width = hud.gc.getWidth();\r\n        int height = hud.gc.getHeight();\r\n\r\n        int beltSlotCount = Inventory.beltWidthSlots;\r\n        int beltY = barPosition.y - height / 2;\r\n\r\n        int totalWidth = Inventory.INVENTORY_WIDTH_SLOTS * slotSize;    // width of main inventory\r\n        int totalHeight =  Inventory.INVENTORY_HEIGHT_SLOTS * slotSize;  // height of main inventory\r\n\r\n        float statsToInvRatio = 0.52f;\r\n        int statsFrameWidth = (int) (statsToInvRatio * totalWidth);\r\n        int statsFrameHeight = totalHeight+50;\r\n\r\n\r\n        int statsFrameX = mainInventoryPosition.x - statsFrameWidth;\r\n        int statsFrameY = mainInventoryPosition.y;\r\n\r\n\r\n        if (statsFrameX < 0)\r\n        {\r\n\r\n            statsFrameWidth = mainInventoryPosition.x;\r\n            statsFrameX = 0;\r\n            if (statsFrameWidth < 0)\r\n            {\r\n                statsFrameWidth = 0;\r\n            }\r\n        }\r\n\r\n        renderFrame(g2d, statsFrameX, statsFrameY, statsFrameWidth, statsFrameHeight, 3, 3, 1, 0.7f);\r\n\r\n\r\n\r\n        EntityStatistics stats = hud.gc.player.statistics;\r\n\r\n        int hp = stats.hitPoints;\r\n        int maxHp = stats.getMaxHitPoints();\r\n        int mana = stats.mana;\r\n        int maxMana = stats.getMaxMana();\r\n        int regen = stats.getRegeneration();\r\n        int movementSpeed = stats.getCurrentMovementSpeed();\r\n        int maxMovementSpeed = stats.getMaxMovementSpeed();\r\n        int armour = stats.getArmour();\r\n        int magicArmour = stats.getMagicArmour();\r\n        int strength = stats.getStrength();\r\n        int dexterity = stats.getDexterity();\r\n        int intellect = stats.getIntellect();\r\n        int stamina = stats.getStamina();\r\n        int exp = stats.getExp();\r\n        int nextLevelExp = stats.getNextLevelExp();\r\n\r\n        String[] statTexts = {\r\n                \"HP: \" + hp + \" / \" + maxHp,\r\n                \"Mana: \" + mana + \" / \" + maxMana,\r\n                \"Regeneration: \" + regen,\r\n                \"Movement Speed: \" + movementSpeed + \" / \" + maxMovementSpeed,\r\n                \"Armour: \" + armour,\r\n                \"Magic Armour: \" + magicArmour,\r\n                \"Strength: \" + strength,\r\n                \"Dexterity: \" + dexterity,\r\n                \"Intellect: \" + intellect,\r\n                \"Stamina: \" + stamina,\r\n                \"EXP: \" + exp + \" / \" + nextLevelExp\r\n        };\r\n\r\n        g2d.setColor(Color.WHITE);\r\n        g2d.setFont(HUDFont);\r\n\r\n        int textX = statsFrameX + 10;\r\n        int textY = statsFrameY + 30;\r\n\r\n        for (String stat : statTexts)\r\n        {\r\n            g2d.drawString(stat, textX, textY);\r\n            textY += scaledFontSize + 5;\r\n        }\r\n\r\n        g2d.dispose();\r\n    }\r\n\r\n    public void drawEquippedFrame(Graphics g2)\r\n    {\r\n        Graphics2D g2d = (Graphics2D) g2.create();\r\n\r\n\r\n\r\n        int equippedFrameWidth = slotSize * 5;\r\n        int equippedFrameHeight = slotSize * 10 + slotSize / 4;\r\n\r\n        // positions of equipped frame\r\n        int width = hud.gc.getWidth();\r\n        int height = hud.gc.getHeight();\r\n        int widthSlots = Inventory.INVENTORY_WIDTH_SLOTS;\r\n        int heightSlots = Inventory.INVENTORY_HEIGHT_SLOTS;\r\n        int totalWidth = widthSlots * slotSize;    // width of main inventory\r\n        int totalHeight = heightSlots * slotSize;  // height of main inventory\r\n        int beltY = barPosition.y - height/2;\r\n\r\n        // position of equipped frame\r\n        int equippedFrameX = mainInventoryPosition.x + totalWidth;\r\n        int equippedFrameY = mainInventoryPosition.y;\r\n\r\n        if (equippedPosition == null) equippedPosition = new Position(equippedFrameX, equippedFrameY);\r\n        else\r\n        {\r\n            equippedPosition.x = equippedFrameX;\r\n            equippedPosition.y = equippedFrameY;\r\n        }\r\n\r\n        renderFrame(g2d, equippedFrameX, equippedFrameY, equippedFrameWidth, equippedFrameHeight, 3, 3, 1, 0.7f);\r\n\r\n        // 1. Helmet (2x2)\r\n        int helmetX = equippedFrameX + (slotSize / 4);\r\n        int helmetY = equippedFrameY + (slotSize / 4);\r\n        renderFrame(g2d, helmetX, helmetY, slotSize * 2, slotSize * 2, 0, 0, 1, 0.7f);\r\n        helmetSlot.updateSlot(slotSize, helmetX, helmetY);\r\n\r\n\r\n        // 2. Chestplate (2x3)\r\n        int chestX = helmetX;\r\n        int chestY = helmetY + slotSize * 2 + (slotSize / 4);\r\n        renderFrame(g2d, chestX, chestY, slotSize * 2, slotSize * 3, 0, 0, 1, 0.7f);\r\n        chestplateSlot.updateSlot(slotSize, chestX, chestY);\r\n\r\n        // 3. Pants (2x3)\r\n        int pantsX = chestX;\r\n        int pantsY = chestY + slotSize * 3 + (slotSize / 4);\r\n        renderFrame(g2d, pantsX, pantsY, slotSize * 2, slotSize * 3, 0, 0, 1, 0.7f);\r\n        pantsSlot.updateSlot(slotSize, pantsX, pantsY);\r\n\r\n        // 4. Boots (2x1)\r\n        int bootsX = pantsX;\r\n        int bootsY = pantsY + slotSize * 3 + (slotSize / 4);\r\n        renderFrame(g2d, bootsX, bootsY, slotSize * 2, slotSize, 0, 0, 1, 0.7f);\r\n        bootsSlot.updateSlot(slotSize, bootsX, bootsY);\r\n\r\n        // 5. Ring1 (1x1)\r\n        int ring1X = equippedFrameX + slotSize * 2 + (slotSize / 2);\r\n        int ring1Y = equippedFrameY + (equippedFrameHeight / 2) - (slotSize * 2);\r\n        renderFrame(g2d, ring1X, ring1Y, slotSize, slotSize, 0, 0, 1, 0.7f);\r\n        ring1Slot.updateSlot(slotSize, ring1X, ring1Y);\r\n\r\n        // 6. Ring2 (1x1)\r\n        int ring2X = ring1X + slotSize + (slotSize / 4);\r\n        int ring2Y = ring1Y;\r\n        renderFrame(g2d, ring2X, ring2Y, slotSize, slotSize, 0, 0, 1, 0.7f);\r\n        ring2Slot.updateSlot(slotSize, ring2X, ring2Y);\r\n\r\n        // 7. Amulet (1x1)\r\n        int amuletX = ring1X + (slotSize / 2) + ((slotSize / 4) / 2);\r\n        int amuletY = ring1Y - slotSize - (slotSize / 4);\r\n        renderFrame(g2d, amuletX, amuletY, slotSize, slotSize, 0, 0, 1, 0.7f);\r\n        amuletSLot.updateSlot(slotSize, amuletX, amuletY);\r\n\r\n        // 8. Shield (2x2)\r\n        int shieldX = ring1X + ((slotSize / 4) / 2);\r\n        int shieldY = ring2Y + slotSize + (slotSize / 4);\r\n        renderFrame(g2d, shieldX, shieldY, slotSize * 2, slotSize * 2, 0, 0, 1, 0.7f);\r\n        shieldSlot.updateSlot(slotSize, shieldX, shieldY);\r\n\r\n        g2d.dispose();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ui/HUDRenderer.java b/src/ui/HUDRenderer.java
--- a/src/ui/HUDRenderer.java	(revision d982421705216c209ffb01e95da3d7ec02390335)
+++ b/src/ui/HUDRenderer.java	(date 1739121484364)
@@ -317,7 +317,6 @@
                 screenSlots.get(i).setItem(item);
             }
         }
-
         //   g2.dispose();
     }
 
@@ -543,7 +542,6 @@
         Graphics2D g2d = (Graphics2D) g2.create();
 
 
-
         int equippedFrameWidth = slotSize * 5;
         int equippedFrameHeight = slotSize * 10 + slotSize / 4;
 
